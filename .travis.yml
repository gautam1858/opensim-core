# This script is used by the Travis-CI (continuous integration) testing
# service to run opensim-core's tests with every GitHub push or pull-request.
# To learn about this file, go to http://docs.travis-ci.com/user/languages/c/
language: cpp

# Use container-based infrastructure to allow caching (for ccache).
sudo: false
    
matrix:
  include:
    - os: linux
      compiler: clang
      env: BTYPE=RelWithDebInfo WRAP=on  DOXY=on  NPROC=1 DEPLOY=yes
    - os: linux
      compiler: gcc
      env: BTYPE=RelWithDebInfo WRAP=off DOXY=off NPROC=3 DEPLOY=no
    - os: linux
      compiler: clang
      env: BTYPE=Debug          WRAP=off DOXY=off NPROC=3 DEPLOY=yes
    - os: osx
      compiler: clang
      env: BTYPE=RelWithDebInfo WRAP=off DOXY=off NPROC=3 DEPLOY=yes

env:
  global:
    # The python tests look for OPENSIM_HOME.
    - OPENSIM_HOME=~/opensim-core
    - OPENSIM_DEPENDENCIES_BUILD_DIR=~/opensim_dependencies-build
    - OPENSIM_DEPENDENCIES_INSTALL_DIR=~/opensim_dependencies-install
    - SWIG_VER=3.0.6
    - USE_CCACHE=1
    - CCACHE_COMPRESS=1
    # for Clang to work with ccache.
    - CCACHE_CPP2=1

cache:
  - directories: $HOME/.ccache

addons:
  # Dependencies on linux.
  apt:
    sources:
      # For gcc >= 4.8
      - ubuntu-toolchain-r-test
      # for clang
      - llvm-toolchain-precise-3.5
      # For cmake >= 2.8.8 (for CMakePackageConfigHelpers)
      - kubuntu-backports
    packages:
      - cmake
      # For Simbody.
      - liblapack-dev
      - g++-4.9
      - clang-3.5
      # In case someone wants to check for memory leaks.
      - valgrind
      # To build doxygen documentation.
      # TOO OLD; see below. - doxygen
      # To run the python tests.
      - python-nose
      # To send a password to ssh.
      - sshpass

before_install:
  ## Ensure that there are no tabs in source code.
  - cd $TRAVIS_BUILD_DIR
  # GREP returns 0 (true) if there are any matches, and
  # we don't want any matches. If there are matches,
  # print a helpful message, and make the test fail by using "false".
  # The GREP command here checks for any tab characters in the the files
  # that match the specified pattern. GREP does not pick up explicit tabs
  # (e.g., literally a \t in a source file).
  - if grep --line-num --recursive --exclude-dir="*dependencies*" --include={CMakeLists.txt,*.cpp,*.c,*.h} -P "\t" . ; then echo "Tabs found in the lines shown above. See CONTRIBUTING.md about tabs."; false; fi

  ## Set up environment variables.
  # Only if compiling with gcc, update environment variables
  # to use the new gcc.
  - if [ "$CXX" = "g++" ]; then export CXX="g++-4.9" CC="gcc-4.9"; fi
  - if [[ "$TRAVIS_OS_NAME" = "linux" && "$CXX" = "clang++" ]]; then export CXX="clang++-3.5" CC="clang-3.5"; fi
  
  ## Temporary hack to find libblas and liblapack.
  # TODO. Currently Simbody is using Travis CI's Ubuntu 14.04 VMs, which link with 
  # liblapack.so.3 and libblas.so.3. These files don't exist on the 12.04 machines.
  - if [ "$TRAVIS_OS_NAME" = "linux" ]; then mkdir ~/lib; fi
  - if [ "$TRAVIS_OS_NAME" = "linux" ]; then ln -s /usr/lib/liblapack.so ~/lib/liblapack.so.3; fi
  - if [ "$TRAVIS_OS_NAME" = "linux" ]; then ln -s /usr/lib/libblas.so ~/lib/libblas.so.3; fi
  - if [ "$TRAVIS_OS_NAME" = "linux" ]; then export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:~/lib; fi

  ## Set up ccache.
  # Lots of this is borrowed from https://github.com/weitjong/Urho3D/blob/master/.travis.yml.
  # Put /usr/lib/ccache on the path.
  - export PATH=$(whereis -b ccache |grep -o '\S*lib\S*'):$PATH
  # For some reason the Travis CI clang compiler toolchain installation does not
  # have a symlink in the ccache symlinks directory, so workaround it
  - ln -s $(which ccache) $HOME/clang && ln -s $(which ccache) $HOME/clang++ && export PATH=$HOME:$PATH
  # Without the following lines, ccache causes clang to not print in color.
  - if [[ $CC = clang* ]]; then export CC="$CC -fcolor-diagnostics"; fi;
  - if [[ $CXX = clang* ]]; then export CXX="$CXX -fcolor-diagnostics"; fi;
  
  ## Doxygen.
  # Need a doxygen that is more recent than that available through apt-get.
  - if [ "$DOXY" = "on" ]; then mkdir ~/doxygen && cd ~/doxygen; fi
  - if [ "$DOXY" = "on" ]; then wget http://ftp.stack.nl/pub/users/dimitri/doxygen-1.8.10.linux.bin.tar.gz; fi
  - if [ "$DOXY" = "on" ]; then tar xzf doxygen-1.8.10.linux.bin.tar.gz; fi

  ## Install Simbody.
  # The Simbody travis script uploads the latestsimbody binaries to bintray.
  - SIMBODYZIP=simbody-latest_${TRAVIS_OS_NAME}_${BTYPE}.zip
  - wget https://dl.bintray.com/chrisdembia/opensim-testing/$SIMBODYZIP
  # Put Simbody in ~/simbody (-q: quiet).
  - unzip -q $SIMBODYZIP -d ~

  ## Install SWIG to build Java/python wrapping.
  - if [[ "$WRAP" = "on" ]]; then if [ "$TRAVIS_OS_NAME" = "osx" ]; then brew install pcre; fi; fi
  - if [[ "$WRAP" = "on" ]]; then mkdir ~/swig-source && cd ~/swig-source; fi
  - if [[ "$WRAP" = "on" ]]; then wget https://github.com/swig/swig/archive/rel-$SWIG_VER.tar.gz; fi
  #- wget http://prdownloads.sourceforge.net/swig/$SWIG.tar.gz
  - if [[ "$WRAP" = "on" ]]; then tar xzf rel-$SWIG_VER.tar.gz && cd swig-rel-$SWIG_VER; fi
  - if [[ "$WRAP" = "on" ]]; then sh autogen.sh && ./configure --prefix=$HOME/swig --disable-ccache && make && make -j8 install; fi
  #- ./configure --prefix=$HOME/swig && make && make -j8 install

  ## Detect if we should check memory leaks with valgrind.
  - cd $TRAVIS_BUILD_DIR
  - if [ "$TRAVIS_OS_NAME" = "linux" ]; then git log --format=%B --no-merges -n 1 | grep '\[ci valgrind\]'; export RUN_VALGRIND=$?; true; fi
  - if [ $RUN_VALGRIND = "0" ]; then export CTEST_FLAGS="-D ExperimentalMemCheck"; fi
  
  ## Decide which tests to exclude.
  # Initialize environment variable.
  - export TESTS_TO_EXCLUDE="unmatched" # This is just for the regex.
  ## On OSX, we know that testInitState fails; exclude it.
  - if [ "$TRAVIS_OS_NAME" = "osx" ]; then export TESTS_TO_EXCLUDE="$TESTS_TO_EXCLUDE|testInitState"; fi
  ## If we are building in debug, there are some tests to ignore.
  - if [ "$BTYPE" = "Debug" ]; then export TESTS_TO_EXCLUDE="$TESTS_TO_EXCLUDE|testInitState|testPrescribedForce|testInducedAccelerations|testAssemblySolver|testCMC|testOptimizationExample|testComponents|testForward|testWrapping"; fi
  
  ## Set compiler flags.
  - export CXX_FLAGS="-Werror"
  - if [ "$TRAVIS_OS_NAME" = "linux" ]; then export CXX_FLAGS="$CXX_FLAGS -Wno-tautological-undefined-compare -Wno-undefined-bool-conversion"; fi;

  # Run superbuild to download, configure, build and install dependencies.
  - mkdir $OPENSIM_DEPENDENCIES_BUILD_DIR
  - cd $OPENSIM_DEPENDENCIES_BUILD_DIR
  - cmake $TRAVIS_BUILD_DIR/dependencies -DCMAKE_INSTALL_PREFIX=$OPENSIM_DEPENDENCIES_INSTALL_DIR -DCMAKE_BUILD_TYPE=$BTYPE -DSUPERBUILD_simbody=OFF
  - make -j8

install:
  - if  [[ "$CC" == *gcc* ]]; then export COMPILER=gcc; fi
  - if  [[ "$CC" == *clang* ]]; then export COMPILER=clang; fi
  - PACKAGENAME="${MACHTYPE}_${COMPILER}_${BTYPE}"
  - echo $PACKAGENAME
  - cd ~
  - curl -fL https://getcli.jfrog.io | sh
  - ./jfrog bt config --user klshrinidhi --key 440061321dba00a68210b482261154ea58d03f00 --licenses Apache-2.0
  - ./jfrog bt download-ver opensim/opensim-core/${PACKAGENAME}/64dca7cd40275491f09f206d849d80cd6ef381a3
  - cat opensim-core-build.tar.gz* > opensim-core-build.tar.gz
  - tar -xzf opensim-core-build-tar.gz
  
  - cd opensim-core-build
  #- mkdir ~/opensim-core-build && cd ~/opensim-core-build
  # Configure OpenSim.
  - cmake $TRAVIS_BUILD_DIR -DBUILD_JAVA_WRAPPING=$WRAP -DBUILD_PYTHON_WRAPPING=$WRAP -DSWIG_EXECUTABLE=$HOME/swig/bin/swig -DSIMBODY_HOME=~/simbody -DOPENSIM_DEPENDENCIES_DIR=$OPENSIM_DEPENDENCIES_INSTALL_DIR -DCMAKE_INSTALL_PREFIX=$OPENSIM_HOME -DCMAKE_BUILD_TYPE=$BTYPE -DCMAKE_CXX_FLAGS="$CXX_FLAGS" -DDOXYGEN_EXECUTABLE=$HOME/doxygen/doxygen-1.8.10/bin/doxygen -DOPENSIM_DOXYGEN_USE_MATHJAX=off -DOPENSIM_SIMBODY_DOXYGEN_LOCATION="https://simtk.org/api_docs/simbody/latest/" -DWITH_BTK:BOOL=ON
  - make -j$NPROC

  # Cache build directory in bintray.
  - BUILD_DIR=$(pwd)
  - echo $BUILD_DIR
  - cd $TRAVIS_BUILD_DIR
  - pwd
  - cd ..
  - rm -rf opensim-core
  - git clone --branch master https://github.com/opensim-org/opensim-core.git
  - cd opensim-core
  - git checkout 64dca7cd40275491f09f206d849d80cd6ef381a3
  - VERSION=$(git log -n1 --format="%H")
  - echo $VERSION
  - cd $BUILD_DIR
  - make -j$NPROC
  - cd ..
  - tar -czf build.tar.gz opensim-core-build
  - split -b 200m opensim-core-build.tar.gz opensim-core-build.tar.gz
  - ls opensim-core-build.tar.gza* | while read f; do curl -T $f -uklshrinidhi:440061321dba00a68210b482261154ea58d03f00 https://api.bintray.com/content/opensim/opensim-core/${PACKAGENAME}/${VERSION}/${PACKAGENAME}/${VERSION}/${f}; done
  - curl -X POST -uklshrinidhi:440061321dba00a68210b482261154ea58d03f00 https://api.bintray.com/content/opensim/opensim-core/${PACKAGENAME}/${VERSION}/publish
